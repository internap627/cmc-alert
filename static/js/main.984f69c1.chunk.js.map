{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","setList","id","last","setLast","useEffect","intervalId","setInterval","rp","requestOptions","then","response","data","num","map","el","indexOf","coinList","slice","platform","symbol","address","token_address","name","join","obj","emailList","ccList","setTimeout","emailjs","send","result","console","log","text","error","catch","err","message","clearInterval","require","method","uri","qs","start","limit","convert","sort","sort_dir","headers","json","gzip","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kjBA8FeA,MA1Ff,WACE,MAAwBC,mBAAS,IAAjC,mBAAaC,GAAb,WACA,EAAwBD,mBAAS,CAAEE,GAAI,OAAvC,mBAAOC,EAAP,KAAaC,EAAb,KAIAC,qBAAU,WACR,IAAMC,EAAaC,aAAY,WAC7BC,EAAGC,GACAC,MAAK,SAACC,GAGL,GAAIA,EAASC,KAAK,GAAGV,KAAOC,EAAKD,GAAI,CACnC,IAAIW,EAAMF,EAASC,KAAKE,KAAI,SAACC,GAAD,OAAQA,EAAGb,MAAIc,QAAQb,EAAKD,IACxDE,EAAQO,EAASC,KAAK,IAEtBX,EAAQ,YAAIU,EAASC,OAErB,IAAIK,EAAWN,EAASC,KACrBM,MAAM,EAAGL,GACTC,KAAI,SAACC,GACJ,IAAII,EAAWJ,EAAGI,UAAYJ,EAAGI,SAASC,OACtCC,EAAUN,EAAGI,UAAYJ,EAAGI,SAASG,cACzC,MAAM,UAAN,OAAiBP,EAAGQ,KAApB,yBAAyCJ,EAAzC,0BAAmEE,MAEpEG,KAAK,MACJC,EAAM,CACRR,SAAUA,EACVS,UAAW,+CACXC,OACE,6VAGJC,YAAW,WACTC,IACGC,KACC,kBACA,mBACAL,EACA,8BAEDf,MACC,SAACqB,GACCC,QAAQC,IAAIF,EAAOG,KAAMjB,MAE3B,SAACkB,GACCH,QAAQC,IAAIE,EAAMD,WAGvB,SAGNE,OAAM,SAACC,GACNL,QAAQC,IAAI,kBAAmBI,EAAIC,cAEtC,KAOH,OAJAV,YAAW,WACTI,QAAQC,IAAI9B,KACX,KAEI,kBAAMoC,cAAcjC,MAC1B,CAACH,IAEJ,IAAMK,EAAKgC,EAAQ,KACb/B,EAAiB,CACrBgC,OAAQ,MACRC,IAAK,sEACLC,GAAI,CACFC,MAAO,IACPC,MAAO,KACPC,QAAS,MACTC,KAAM,aACNC,SAAU,OAEZC,QAAS,CACP,oBAzEM,wCA2ERC,MAAM,EACNC,MAAM,GAGR,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,kBC7ETC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.984f69c1.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport emailjs from \"emailjs-com\";\nimport \"./App.css\";\n\nfunction App() {\n  const [list, setList] = useState([]);\n  const [last, setLast] = useState({ id: 9840 });\n\n  const x = \"7a930438-3d27-4ad8-98b1-c66578fab4a7\";\n\n  useEffect(() => {\n    const intervalId = setInterval(function () {\n      rp(requestOptions)\n        .then((response) => {\n          // console.log(\"API call response:\", response.data);\n\n          if (response.data[0].id !== last.id) {\n            let num = response.data.map((el) => el.id).indexOf(last.id);\n            setLast(response.data[0]);\n\n            setList([...response.data]);\n\n            let coinList = response.data\n              .slice(0, num)\n              .map((el) => {\n                let platform = el.platform && el.platform.symbol\n                let address = el.platform && el.platform.token_address\n                return `Name : ${el.name} || Network : ${platform} || Contract : ${address}`\n              })\n              .join(\", \");\n            let obj = {\n              coinList: coinList,\n              emailList: \"saidcryptog@gmail.com, cryptomood1@gmail.com\",\n              ccList:\n                \"internap627@gmail.com, Thebrightbrains1@gmail.com, Bob123bill1231@gmail.com, cryptoguru11@hotmail.com, Abdulhakeem15th@gmail.com, ishy_ozzy307@hotmail.com, Moaweys1010@gmail.com, Abubakara1996@gmail.com, Jeilani90@gmail.com, zcrypto03@gmail.com, adamelhaddad3@gmail.com, Cheekymarketuk@gmail.com, hillflos00@gmail.com, moonshooters1988@gmail.com\",\n            };\n\n            setTimeout(function () {\n              emailjs\n                .send(\n                  \"service_pdhtum6\",\n                  \"template_3xurina\",\n                  obj,\n                  \"user_wDbnaIvWCLYgVPps0l1dl\"\n                )\n                .then(\n                  (result) => {\n                    console.log(result.text, coinList);\n                  },\n                  (error) => {\n                    console.log(error.text);\n                  }\n                );\n            }, 2000);\n          }\n        })\n        .catch((err) => {\n          console.log(\"API call error:\", err.message);\n        });\n    }, 70000);\n\n    //Triggers when \"last\" changes because of dependency array\n    setTimeout(function () {\n      console.log(last);\n    }, 5000);\n\n    return () => clearInterval(intervalId);\n  }, [last]);\n\n  const rp = require(\"request-promise\");\n  const requestOptions = {\n    method: \"GET\",\n    uri: \"https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest\",\n    qs: {\n      start: \"1\",\n      limit: \"50\",\n      convert: \"USD\",\n      sort: \"date_added\",\n      sort_dir: \"asc\",\n    },\n    headers: {\n      \"X-CMC_PRO_API_KEY\": x,\n    },\n    json: true,\n    gzip: true,\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}